import { prisma, getPrisma } from "../lib/db"
import { ActivityStatus, ActivityType, GroupMemberType, GroupVisibility, GroupType, OpportunityStage, OpportunityStatus, OpportunityType } from "@prisma/client"

/**
 * Adds 10 Activities, 10 Opportunities, and 10 Groups (with this contact as a member)
 * for the contact whose full name matches "Jordan Cole" (case-insensitive).
 *
 * Usage:
 *   - Ensure DATABASE_URL (or Cloud SQL connector env) is configured.
 *   - Run: npx tsx scripts/add-contact-test-data.ts
 */
async function main() {
  const client = await getPrisma()

  const contact = await client.contact.findFirst({
    where: {
      fullName: { equals: "Jordan Cole", mode: "insensitive" },
    },
    select: {
      id: true,
      tenantId: true,
      accountId: true,
      ownerId: true,
      createdById: true,
    },
  })

  if (!contact) {
    console.error("Contact not found: Jordan Cole")
    process.exit(1)
  }

  const { tenantId, accountId } = contact

  // Choose a user to act as creator/owner for test records
  const creatorUser = await client.user.findFirst({
    where: { tenantId },
    select: { id: true },
  })
  if (!creatorUser) {
    console.error("No user found in tenant to act as creator. Aborting.")
    process.exit(1)
  }
  const creatorId = creatorUser.id

  // 1) Activities (10)
  const activityPayloads = Array.from({ length: 10 }).map((_, i) => ({
    tenantId,
    accountId,
    contactId: contact.id,
    creatorId,
    assigneeId: contact.ownerId ?? creatorId,
    activityType: [ActivityType.Call, ActivityType.Meeting, ActivityType.ToDo, ActivityType.Note, ActivityType.Other][i % 5],
    subject: `Test Activity ${i + 1} for Jordan Cole`,
    description: `Autogenerated test activity ${i + 1} to verify scrolling and sticky headers.`,
    status: ActivityStatus.Open,
  }))

  await client.activity.createMany({ data: activityPayloads })

  // 2) Opportunities (10) â€” tied to the contact's account
  // Minimal required fields per schema
  const opportunityPayloads = Array.from({ length: 10 }).map((_, i) => ({
    tenantId,
    accountId,
    ownerId: contact.ownerId ?? creatorId,
    createdById: creatorId,
    name: `Test Opportunity ${i + 1} - Jordan Cole`,
    stage: OpportunityStage.Qualification,
    status: OpportunityStatus.Open,
    type: OpportunityType.NewBusiness,
  }))

  await client.opportunity.createMany({ data: opportunityPayloads })

  // 3) Groups (10) + GroupMembers associating the contact to each group
  for (let i = 0; i < 10; i++) {
    const group = await client.group.create({
      data: {
        tenantId,
        name: `Test Group ${i + 1} - Jordan Cole`,
        visibility: GroupVisibility.Private,
        groupType: GroupType.AccountGroup,
        ownerId: contact.ownerId ?? creatorId,
        description: `Autogenerated test group ${i + 1} for contact test data.`,
        isActive: true,
      },
      select: { id: true },
    })

    // Add the contact as a member of the group
    await client.groupMember.create({
      data: {
        tenantId,
        groupId: group.id,
        memberType: GroupMemberType.Contact,
        contactId: contact.id,
        addedById: creatorId,
      },
    })
  }

  console.log("Inserted 10 activities, 10 opportunities, and 10 groups for contact: Jordan Cole")
}

main()
  .catch(err => {
    console.error(err)
    process.exit(1)
  })
  .finally(async () => {
    try { await (await getPrisma()).$disconnect() } catch {}
  })
